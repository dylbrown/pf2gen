# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get the current version
        id: current_version
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
          releases-only: true
          prefix: 'v'
          sort-tags: true

      - run: echo "Current version is ${{ steps.current_version.outputs.tag }}"

      - name: Get Maven Version number
        id: maven_version
        run: echo ::set-output name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file pom.xml)

      - run: echo "Maven version is ${{ format('v{0}', steps.maven_version.outputs.VERSION) }}"

      - name: Set up JDK 11
        if: ${{steps.current_version.outputs.tag != format('v{0}', steps.maven_version.outputs.VERSION)}}
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml

      - name: Build with Maven
        if: ${{steps.current_version.outputs.tag != format('v{0}', steps.maven_version.outputs.VERSION)}}
        run: mvn clean compile assembly:single --file pom.xml

      - name: Create Release
        if: ${{steps.current_version.outputs.tag != format('v{0}', steps.maven_version.outputs.VERSION)}}
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}', steps.maven_version.outputs.VERSION) }}
          release_name: ${{ format('v{0}', steps.maven_version.outputs.VERSION) }}
          body: |
            # PF2Gen ${{format('v{0}', steps.maven_version.outputs.VERSION)}}
            ## Changelog
            ## Requirements
            This requires Java 11 (I'm currently using [AdoptOpenJDK](https://adoptopenjdk.net/)).
            ## Offline Usage
            Note that if you simply download the .jar and run it, it will pull the sources from [my sources repo](https://github.com/dylbrown/pf2gen_data)'s GitHub Pages each time you launch (This will likely go away, but it's been useful thus far). If you would like to run offline, simply download the contents of the data repo and place the .jar file in the root directory of your copy.
          draft: true
          prerelease: true

      - name: Upload Release Asset
        if: ${{steps.current_version.outputs.tag != format('v{0}', steps.maven_version.outputs.VERSION)}}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{format('{0}/target/pf2gen-{1}.jar', github.workspace, steps.maven_version.outputs.VERSION)}}
          asset_name: ${{format('pf2gen-{0}.jar', steps.maven_version.outputs.VERSION)}}
          asset_content_type: application/java-archive